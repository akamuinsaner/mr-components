var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var r,s=1,t=arguments.length;s<t;s++)for(var a in r=arguments[s])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},__read=this&&this.__read||function(e,r){var s="function"==typeof Symbol&&e[Symbol.iterator];if(!s)return e;var t,a,n=s.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=n.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(s=n.return)&&s.call(n)}finally{if(a)throw a.error}}return o},__spreadArray=this&&this.__spreadArray||function(e,r,s){if(s||2===arguments.length)for(var t,a=0,n=r.length;a<n;a++)!t&&a in r||((t=t||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(t||Array.prototype.slice.call(r))};import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import React from"react";import{Box,ListItem,ListItemIcon,ListItemText,Checkbox}from"@mui/material";import{ArrowRight}from"@mui/icons-material";import classNames from"classnames";import styles from"./index.module.css";import{useDraggable,useDroppable}from"@dnd-kit/core";import{CSS}from"@dnd-kit/utilities";import CircularProgress from"@mui/material/CircularProgress";var TreeNode=function(e){var r,s=e.blockNodes,t=e.activeId,a=e.checkable,n=e.indeterminate,o=e.checked,i=e.data,l=e.depth,c=e.draggable,m=e.expand,d=e.overId,g=e.toggleCheck,f=e.toggleExpand,p=e.selected,_=e.toggleSelect,u=e.showLine,h=e.idSiblingsAfterMap,y=e.switchIcon,x=e.parentChain,N=e.loadData,b=e.loadingId,j=e.startLoadData,e=i.id,k=i.name,v=i.children,v=v&&v.length,N=_jsxs(ListItem,__assign({disablePadding:!0,className:classNames(styles["mr-tree-node"],((r={})[styles["mr-tree-node-block"]]=s,r[styles["mr-tree-leaf"]]=!v&&!N,r[styles["mr-tree-node-selected"]]=p,r))},{children:[Array(l).fill({}).reduce(function(e,r,s){var t,s=x[s],s=!!(0<h.get(s).length&&u);return __spreadArray([_jsx(Box,{className:classNames(styles["mr-tree-node-indent"],((t={})[styles["mr-tree-node-indent-line"]]=s,t))})],__read(e),!1)},[]),b===e?_jsx(CircularProgress,{size:20,sx:{marginRight:"4px"}}):(s=_jsx(ArrowRight,{}),"function"!=typeof y&&y&&(s=y),"function"==typeof y&&y&&(s=y(i,m)),_jsx(ListItemIcon,__assign({className:classNames(styles["mr-tree-node-arrow"],((v={})[styles["mr-tree-node-switch"]]=!0,v[styles["mr-tree-node-switch-open"]]=m,v)),onClick:function(){f(i,!m),j(i)}},{children:s}))),a?_jsx(ListItemIcon,__assign({className:styles["mr-tree-node-checkbox"]},{children:_jsx(Checkbox,{checked:o,indeterminate:n,onChange:function(e){return g(i,e.target.checked)},className:styles["mr-tree-node-checkbox-inner"]})})):null,_jsx(ListItemText,__assign({className:classNames(styles["mr-tree-node-text"]),onClick:function(){return _(i,!p)}},{children:k}))]}));return c?(l=(r=useDraggable({id:e,data:i})).attributes,b=r.listeners,y=r.setNodeRef,v=r.transform,s=r.isDragging,a=useDroppable({id:e,data:i}).setNodeRef,o=Object.assign({},{transform:CSS.Transform.toString(v),opacity:s?.3:1}),n=t===e,_jsxs(Box,__assign({ref:a,className:classNames(styles["mr-tree-drop"],((k={})[styles["mr-tree-drag-over"]]=d===e,k))},{children:[React.cloneElement(N,__assign(__assign({ref:y,style:o,className:classNames(N.props.className,((c={})[styles["mr-tree-node-dragging"]]=s,c))},b),l)),n?React.cloneElement(N,{className:classNames(N.props.className,[styles["mr-tree-drag-overlay"]])}):null]}))):N};export default TreeNode;