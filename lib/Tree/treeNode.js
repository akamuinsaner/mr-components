var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var s,r=1,t=arguments.length;r<t;r++)for(var a in s=arguments[r])Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a]);return e}).apply(this,arguments)},__read=this&&this.__read||function(e,s){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var t,a,n=r.call(e),o=[];try{for(;(void 0===s||0<s--)&&!(t=n.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},__spreadArray=this&&this.__spreadArray||function(e,s,r){if(r||2===arguments.length)for(var t,a=0,n=s.length;a<n;a++)!t&&a in s||((t=t||Array.prototype.slice.call(s,0,a))[a]=s[a]);return e.concat(t||Array.prototype.slice.call(s))};import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import React from"react";import{Box,ListItem,ListItemIcon,ListItemText,Checkbox}from"@mui/material";import{ArrowRight}from"@mui/icons-material";import classNames from"classnames";import styles from"./index.module.css";import{useDraggable,useDroppable}from"@dnd-kit/core";import{CSS}from"@dnd-kit/utilities";var TreeNode=function(e){var s=e.blockNodes,r=e.activeId,t=e.checkable,a=e.indeterminate,n=e.checked,o=e.data,i=e.depth,l=e.draggable,c=e.expand,m=e.overId,d=e.toggleCheck,g=e.toggleExpand,f=e.selected,_=e.toggleSelect,p=e.showLine,h=e.idSiblingsAfterMap,y=e.switchIcon,u=e.parentChain,e=o.id,x=o.name,N=o.children,N=N&&N.length,b=_jsxs(ListItem,__assign({disablePadding:!0,className:classNames(styles["mr-tree-node"],((b={})[styles["mr-tree-node-block"]]=s,b[styles["mr-tree-leaf"]]=!N,b[styles["mr-tree-node-selected"]]=f,b))},{children:[Array(i).fill({}).reduce(function(e,s,r){var t,r=u[r],r=!!(0<h.get(r).length&&p);return __spreadArray([_jsx(Box,{className:classNames(styles["mr-tree-node-indent"],((t={})[styles["mr-tree-node-indent-line"]]=r,t))})],__read(e),!1)},[]),(s=_jsx(ArrowRight,{}),"function"!=typeof y&&y&&(s=y),"function"==typeof y&&y&&(s=y(o,c)),_jsx(ListItemIcon,__assign({className:classNames(styles["mr-tree-node-arrow"],((N={})[styles["mr-tree-node-switch"]]=!0,N[styles["mr-tree-node-switch-open"]]=c,N)),onClick:function(){return g(o,!c)}},{children:s}))),t?_jsx(ListItemIcon,__assign({className:styles["mr-tree-node-checkbox"]},{children:_jsx(Checkbox,{checked:n,indeterminate:a,onChange:function(e){return d(o,e.target.checked)},className:styles["mr-tree-node-checkbox-inner"]})})):null,_jsx(ListItemText,__assign({className:classNames(styles["mr-tree-node-text"]),onClick:function(){return _(o,!f)}},{children:x}))]}));return l?(y=(i=useDraggable({id:e,data:o})).attributes,N=i.listeners,s=i.setNodeRef,t=i.transform,n=i.isDragging,a=useDroppable({id:e,data:o}).setNodeRef,x=Object.assign({},{transform:CSS.Transform.toString(t),opacity:n?.3:1}),l=r===e,_jsxs(Box,__assign({ref:a,className:classNames(styles["mr-tree-drop"],((i={})[styles["mr-tree-drag-over"]]=m===e,i))},{children:[React.cloneElement(b,__assign(__assign({ref:s,style:x,className:classNames(b.props.className,((t={})[styles["mr-tree-node-dragging"]]=n,t))},N),y)),l?React.cloneElement(b,{className:classNames(b.props.className,[styles["mr-tree-drag-overlay"]])}):null]}))):b};export default TreeNode;