var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var r,s=1,t=arguments.length;s<t;s++)for(var a in r=arguments[s])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},__read=this&&this.__read||function(e,r){var s="function"==typeof Symbol&&e[Symbol.iterator];if(!s)return e;var t,a,n=s.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=n.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(s=n.return)&&s.call(n)}finally{if(a)throw a.error}}return o},__spreadArray=this&&this.__spreadArray||function(e,r,s){if(s||2===arguments.length)for(var t,a=0,n=r.length;a<n;a++)!t&&a in r||((t=t||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(t||Array.prototype.slice.call(r))};import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import React from"react";import{Box,ListItem,ListItemIcon,ListItemText,Checkbox}from"@mui/material";import{ArrowRight}from"@mui/icons-material";import classNames from"classnames";import styles from"./index.module.css";import{useDraggable,useDroppable}from"@dnd-kit/core";import{CSS}from"@dnd-kit/utilities";import CircularProgress from"@mui/material/CircularProgress";var TreeNode=function(e){var r=e.blockNodes,s=e.activeId,t=e.checkable,a=e.indeterminate,n=e.checked,o=e.data,i=e.depth,l=e.draggable,c=e.expand,m=e.overId,d=e.toggleCheck,g=e.toggleExpand,f=e.selected,p=e.toggleSelect,_=e.showLine,u=e.idSiblingsAfterMap,h=e.switchIcon,y=e.parentChain,x=e.loadData,N=e.loadingId,b=e.startLoadData,e=o.id,j=o.name,k=o.children,v=k&&k.length,k=_jsxs(ListItem,__assign({disablePadding:!0,className:classNames(styles["mr-tree-node"],((k={})[styles["mr-tree-node-block"]]=r,k[styles["mr-tree-leaf"]]=!v&&!x,k[styles["mr-tree-node-selected"]]=f,k))},{children:[Array(i).fill({}).reduce(function(e,r,s){var t,s=y[s],s=!!(0<u.get(s).length&&_);return __spreadArray([_jsx(Box,{className:classNames(styles["mr-tree-node-indent"],((t={})[styles["mr-tree-node-indent-line"]]=s,t))})],__read(e),!1)},[]),N===e?_jsx(CircularProgress,{size:20,sx:{marginRight:"4px"}}):(r=_jsx(ArrowRight,{}),"function"!=typeof h&&h&&(r=h),"function"==typeof h&&h&&(r=h(o,c)),_jsx(ListItemIcon,__assign({className:classNames(styles["mr-tree-node-arrow"],((x={})[styles["mr-tree-node-switch"]]=!0,x[styles["mr-tree-node-switch-open"]]=c,x)),onClick:function(){v?g(o,!c):b(o)}},{children:r}))),t?_jsx(ListItemIcon,__assign({className:styles["mr-tree-node-checkbox"]},{children:_jsx(Checkbox,{checked:n,indeterminate:a,onChange:function(e){return d(o,e.target.checked)},className:styles["mr-tree-node-checkbox-inner"]})})):null,_jsx(ListItemText,__assign({className:classNames(styles["mr-tree-node-text"]),onClick:function(){return p(o,!f)}},{children:j}))]}));return l?(N=(i=useDraggable({id:e,data:o})).attributes,h=i.listeners,x=i.setNodeRef,r=i.transform,t=i.isDragging,n=useDroppable({id:e,data:o}).setNodeRef,a=Object.assign({},{transform:CSS.Transform.toString(r),opacity:t?.3:1}),j=s===e,_jsxs(Box,__assign({ref:n,className:classNames(styles["mr-tree-drop"],((l={})[styles["mr-tree-drag-over"]]=m===e,l))},{children:[React.cloneElement(k,__assign(__assign({ref:x,style:a,className:classNames(k.props.className,((i={})[styles["mr-tree-node-dragging"]]=t,i))},h),N)),j?React.cloneElement(k,{className:classNames(k.props.className,[styles["mr-tree-drag-overlay"]])}):null]}))):k};export default TreeNode;