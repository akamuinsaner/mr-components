var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},__read=this&&this.__read||function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var r,n,d=a.call(e),o=[];try{for(;(void 0===t||0<t--)&&!(r=d.next()).done;)o.push(r.value)}catch(e){n={error:e}}finally{try{r&&!r.done&&(a=d.return)&&a.call(d)}finally{if(n)throw n.error}}return o},__spreadArray=this&&this.__spreadArray||function(e,t,a){if(a||2===arguments.length)for(var r,n=0,d=t.length;n<d;n++)!r&&n in t||((r=r||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(r||Array.prototype.slice.call(t))};import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import React from"react";import{Stack}from"@mui/material";import TreeNode from"./treeNode";import styles from"./index.module.css";import getTreeDataFormatted,{RESERVED_KEY}from"../utils/getTreeDataFormatted";import{DndContext,useSensor,useSensors,PointerSensor}from"@dnd-kit/core";import classNames from"classnames";import useChecked from"./useChecked";import useExpanded from"./useExpanded";import useSelected from"./useSelected";import useDnd from"./useDnd";import useLoadData from"./useLoadData";var Tree=function(e){var l=e.blockNodes,c=e.checkable,t=e.checkedKeys,i=e.checkWithRelation,a=e.className,r=e.defaultCheckedKeys,n=e.defaultCheckedAll,d=e.defaultExpandedKeys,o=e.defaultExpandAll,s=e.defaultSelectedKeys,u=e.defaultSelectAll,p=e.draggable,f=e.expandedKeys,g=e.loadData,h=e.onCheck,m=e.onExpand,y=e.onDrop,_=e.onSelect,x=e.selectedKeys,S=e.showLine,D=e.switchIcon,k=e.sx,E=e.treeData,v=React.useRef(!1),e=__read(React.useState(getTreeDataFormatted(E)),2),C=e[0],K=e[1],A=(React.useEffect(function(){v.current?K(getTreeDataFormatted(E)):v.current=!0},[E]),C.flattedData),b=C.idChildrenIdMap,R=C.parentChainMap,j=C.idSiblingsAfterMap,e=useChecked({dataSet:C,checkedKeys:t,checkWithRelation:i,defaultCheckedKeys:r,defaultCheckedAll:n,onCheck:h}),I=e.checkKeys,N=e.toggleCheck,t=useExpanded({dataSet:C,defaultExpandedKeys:d,defaultExpandAll:o,expandedKeys:f,onExpand:m}),T=t.expandKeys,L=t.toggleExpand,r=useLoadData({loadData:g,toggleExpand:L}),O=r.loadingId,F=r.startLoadData,n=useSelected({dataSet:C,defaultSelectedKeys:s,defaultSelectAll:u,selectedKeys:x,onSelect:_}),M=n.selectKeys,P=n.toggleSelect,h=useDnd({dataSet:C,toggleExpand:L,onDrop:y}),V=h.activeId,W=h.overId,e=h.onDragStart,d=h.onDragOver,o=h.onDragEnd,w=function(t,s){void 0===t&&(t=RESERVED_KEY),void 0===s&&(s=0);var e=A.filter(function(e){return e.parentId===t});return e.length?e.map(function(e){var t=e.id,a=T.includes(t),r=I.includes(e.id),n=!!b.get(e.id).find(function(e){return I.includes(e)})&&!r&&i,d=M.includes(t),o=R.get(e.id);return __spreadArray([_jsx(TreeNode,{blockNodes:l,data:e,depth:s,checkable:c,expand:a,toggleExpand:L,checked:r,indeterminate:n,toggleCheck:N,selected:d,toggleSelect:P,showLine:S,idSiblingsAfterMap:j,parentChain:o,switchIcon:D,draggable:p,activeId:V,overId:W,loadData:g,loadingId:O,startLoadData:F},t)],__read((e=t,r=s+1,a?w(e,r):[])),!1)}):[]},f=_jsxs(Stack,__assign({direction:"column",className:classNames(styles["mr-tree"],a),sx:k},{children:__spreadArray([],__read(w()),!1)}));return p?_jsx(DndContext,__assign({onDragStart:e,onDragEnd:o,onDragOver:d,sensors:useSensors(useSensor(PointerSensor,{activationConstraint:{distance:10}}))},{children:f})):f};export default Tree;