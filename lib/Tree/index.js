var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,r=1,a=arguments.length;r<a;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},__read=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var a,n,s=r.call(e),d=[];try{for(;(void 0===t||0<t--)&&!(a=s.next()).done;)d.push(a.value)}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return d},__spreadArray=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var a,n=0,s=t.length;n<s;n++)!a&&n in t||((a=a||Array.prototype.slice.call(t,0,n))[n]=t[n]);return e.concat(a||Array.prototype.slice.call(t))};import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import React from"react";import{Stack}from"@mui/material";import TreeNode from"./treeNode";import styles from"./index.module.css";import getTreeDataFormatted,{RESERVED_KEY}from"../utils/getTreeDataFormatted";import{DndContext,useSensor,useSensors,PointerSensor}from"@dnd-kit/core";import classNames from"classnames";import useChecked from"./useChecked";import useExpanded from"./useExpanded";import useSelected from"./useSelected";import useDnd from"./useDnd";var Tree=function(e){var c=e.blockNodes,l=e.checkable,t=e.checkedKeys,i=e.checkWithRelation,r=e.className,a=e.defaultCheckedKeys,n=e.defaultCheckedAll,s=e.defaultExpandedKeys,d=e.defaultExpandAll,o=e.defaultSelectedKeys,u=e.defaultSelectAll,p=e.draggable,f=e.expandedKeys,h=e.onCheck,m=e.onExpand,g=e.onDrop,y=e.onSelect,_=e.selectedKeys,S=e.showLine,x=e.switchIcon,k=e.sx,E=e.treeData,v=React.useRef(!1),e=__read(React.useState(getTreeDataFormatted(E)),2),D=e[0],C=e[1],K=(React.useEffect(function(){v.current?C(getTreeDataFormatted(E)):v.current=!0},[E]),D.flattedData),A=D.idChildrenIdMap,b=D.parentChainMap,R=D.idSiblingsAfterMap,e=useChecked({dataSet:D,checkedKeys:t,checkWithRelation:i,defaultCheckedKeys:a,defaultCheckedAll:n,onCheck:h}),j=e.checkKeys,N=e.toggleCheck,t=useExpanded({dataSet:D,defaultExpandedKeys:s,defaultExpandAll:d,expandedKeys:f,onExpand:m}),I=t.expandKeys,T=t.toggleExpand,a=useSelected({dataSet:D,defaultSelectedKeys:o,defaultSelectAll:u,selectedKeys:_,onSelect:y}),w=a.selectKeys,F=a.toggleSelect,n=useDnd({dataSet:D,toggleExpand:T,onDrop:g}),M=n.activeId,P=n.overId,h=n.onDragStart,e=n.onDragOver,s=n.onDragEnd,O=function(t,o){void 0===t&&(t=RESERVED_KEY),void 0===o&&(o=0);var e=K.filter(function(e){return e.parentId===t});return e.length?e.map(function(e){var t=e.id,r=I.includes(t),a=j.includes(e.id),n=!!A.get(e.id).find(function(e){return j.includes(e)})&&!a&&i,s=w.includes(t),d=b.get(e.id);return __spreadArray([_jsx(TreeNode,{blockNodes:c,data:e,depth:o,checkable:l,expand:r,toggleExpand:T,checked:a,indeterminate:n,toggleCheck:N,selected:s,toggleSelect:F,showLine:S,idSiblingsAfterMap:R,parentChain:d,switchIcon:x,draggable:p,activeId:M,overId:P},t)],__read((e=t,a=o+1,r?O(e,a):[])),!1)}):[]},d=_jsxs(Stack,__assign({direction:"column",className:classNames(styles["mr-tree"],r),sx:k},{children:__spreadArray([],__read(O()),!1)}));return p?_jsx(DndContext,__assign({onDragStart:h,onDragEnd:s,onDragOver:e,sensors:useSensors(useSensor(PointerSensor,{activationConstraint:{distance:10}}))},{children:d})):d};export default Tree;